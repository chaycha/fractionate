import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import Button from "@mui/material/Button";
import Dialog from "@mui/material/Dialog";
import DialogActions from "@mui/material/DialogActions";
import DialogContent from "@mui/material/DialogContent";
import DialogContentText from "@mui/material/DialogContentText";
import DialogTitle from "@mui/material/DialogTitle";
import Alert from "@mui/material/Alert";
import { ethers } from "ethers";

const daoContractAddress = process.env.REACT_APP_DEPLOYED_DAO_ADDRESS;

export default function VoteDialog({ proposal, tokenId }) {
  const [dialogOpen, setDialogOpen] = useState(false);
  const [voted, setVoted] = useState(false);
  const [alertOpen, setAlertOpen] = useState(false);
  const [voteType, setVoteType] = useState("");
  const navigate = useNavigate();

  const handleClickOpen = () => {
    if (voted) {
      alert("You have already voted on this proposal");
    } else {
      setDialogOpen(true);
    }
  };

  const handleClose = () => {
    setDialogOpen(false);
  };

  // TODO: Implement voting logic
  const handleVote = (type) => {
    vote(type);
    setVoteType(type);
    setVoted(true);
    setAlertOpen(true);
    setDialogOpen(false);
  };

  const vote = async (type) => {
    try {
      // Provider to connect to Sepolia testnet from Metamask
      const metamaskProvider = new ethers.BrowserProvider(window.ethereum);

      // Get signer from metamask, assume it is already connected
      const signer = await metamaskProvider.getSigner();

      // Retrieve a contract instance using contract address, ABI, and provider
      const contract = new ethers.Contract(
        daoContractAddress,
        ["function vote(uint256 proposalId, bool decision) public"],
        metamaskProvider
      );
      // if error could not get contract
      if (!contract) {
        console.log("Could not get contract");
        return;
      }

      // create the proposal
      // note that the connect() function is NECESSARY here, without it you'll get an error "Contract runner does not support sending transactions"
      // when this line is executed, a metamask popup will appear asking for your confirmation to sign the transaction
      const decision = type === "for";
      await contract.connect(signer).vote(proposal.id, decision);
      console.log(`Voted ${type} proposal ${proposal.id} successfully`);
      handleClose();
    } catch (error) {
      console.log(`Error voting on proposal ${proposal.id}`, error);
      alert("Error creating proposal");
    }
  };

  const handleAlertClose = () => {
    setAlertOpen(false);
    navigate(`/dashboard/my-assets/${tokenId}`);
  };

  useEffect(() => {
    const checkIfVoted = async () => {
      try {
        // Provider to connect to Sepolia testnet from Metamask
        const metamaskProvider = new ethers.BrowserProvider(window.ethereum);

        // Get signer from metamask, assume it is already connected
        const signer = await metamaskProvider.getSigner();

        // Retrieve a contract instance using contract address, ABI, and provider
        // *Note*: although hasVoted function is not defined in contract's code, it is automatically generated by solidity as a getter for public hasVoted mapping.
        const contract = new ethers.Contract(
          daoContractAddress,
          [
            "function hasVoted(uint256 proposalId, address voterAddress) public view returns (bool)",
          ],
          metamaskProvider
        );
        // if error could not get contract
        if (!contract) {
          console.log("Could not get contract");
          return;
        }

        const voted = await contract
          .connect(signer)
          .hasVoted(proposal.id, signer.getAddress());
        setVoted(voted);
      } catch (error) {
        console.log(
          `Error checking if voted on proposal ${proposal.id}`,
          error
        );
      }
    };

    checkIfVoted();
  }, [proposal]);

  return (
    <div>
      <Button
        variant="contained"
        color="primary"
        onClick={handleClickOpen}
        disabled={voted}
      >
        {voted ? "Voted" : "Vote"}
      </Button>
      <Dialog open={dialogOpen} onClose={handleClose}>
        <DialogTitle>Vote on Proposal</DialogTitle>
        <DialogContent>
          <DialogContentText>
            Vote on proposal number {proposal.id} proposed by{" "}
            {proposal.proposer} {/* Display the proposal information */}
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => handleVote("for")}>For</Button>
          <Button onClick={() => handleVote("against")}>Against</Button>
          <Button onClick={handleClose}>Cancel</Button>
        </DialogActions>
      </Dialog>
      <Dialog open={alertOpen} onClose={handleAlertClose}>
        <Alert onClose={handleAlertClose} severity="success" sx={{ mb: 2 }}>
          Voted {voteType} proposal {proposal.id} successfully
        </Alert>
      </Dialog>
    </div>
  );
}
